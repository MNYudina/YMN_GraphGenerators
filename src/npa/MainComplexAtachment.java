package npa;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.commons.collections15.Buffer;
import org.apache.commons.collections15.Factory;
import org.apache.commons.collections15.Transformer;
import org.apache.commons.collections15.buffer.UnboundedFifoBuffer;

import edu.uci.ics.jung.graph.DirectedSparseGraph;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.UndirectedSparseGraph;
import edu.uci.ics.jung.graph.UndirectedSparseMultigraph;
import edu.uci.ics.jung.graph.util.Pair;
import edu.uci.ics.jung.io.PajekNetReader;
import edu.uci.ics.jung.io.PajekNetWriter;

public class MainComplexAtachment {
	static Factory<Integer> vertexFactory = new Factory<Integer>() { // фабрика
																		// для
																		// создания
																		// вершин
		int i = 0;

		public Integer create() {
			return new Integer(i++);
		}
	};
	static Factory<Integer> edgeFactory = new Factory<Integer>() { // фабрика
																	// для
																	// создания
																	// ребер
		int i = 0;

		public Integer create() {
			return new Integer(i++);
		}
	};
	private static Graph graph;

	public static void main(String[] args) throws IOException {
		double[] rnMonad = new double[] { 
				0,
				0.634118723,
				0.089224006,
				0.080267557,
				0.018489255,
				0.027727014,
				0.023641551,
				0.126531896


		};
		double[] rnDiad = new double[] { 	
				0,
				0.821169014,
				0.178830986

		};

		GenNonIntBA5 genBA = new GenNonIntBA5(vertexFactory, edgeFactory, rnMonad, rnDiad, 2, pnRule, 0.3, 1. / 2.);

		Graph graph = genBA.evolve(50000, seed_graph());
		System.out.println("===");
		System.out.println("V:" + graph.getVertexCount());
		System.out.println("E:" + graph.getEdgeCount());
		int k_max = getMaxDegree(graph);
		System.out.println("m=" + graph.getEdgeCount() / (double) graph.getVertexCount());
		int[] degrees = getNodesDegrees(graph, k_max + 1);
		for (int i = 0; i < degrees.length; i++) {
			System.out.println(degrees[i]);

		}

		int[] m = getTriAndVilk2(graph);
		System.out.println("m[0]" + m[0]);
		System.out.println("m[1]" + m[1]);
		System.out.println(3.0 * m[0] / (double) m[1]);

		/*
		 * int[][] mass = getQMatrix(graph, 40); File logFile = new
		 * File("diad_out22.txt"); FileWriter writeFile = new
		 * FileWriter(logFile); int count = 0; for (int i = 1; i < mass.length;
		 * i++) { for (int j = 1; j < mass.length; j++) {
		 * writeFile.write(String.format("%.8f", mass[i][j] / 2. / (double)
		 * graph.getEdgeCount()) + " "); } writeFile.write("\n"); }
		 * writeFile.close(); saveGraph(graph, "diad22.net");
		 */

	}
	public static void main2(String[] args) throws IOException {
		Graph graph = getNetObject("omgtu_oneComponent.net", 0);
		System.out.println("V:" + graph.getVertexCount());
		System.out.println("E:" + graph.getEdgeCount());
		int k_max = getMaxDegree(graph);
		System.out.println("m=" + graph.getEdgeCount() / (double) graph.getVertexCount());
		int[] degrees = getNodesDegrees(graph, k_max + 1);
		for (int i = 0; i < degrees.length; i++) {
			System.out.println(degrees[i]);

		}

		int[] m = getTriAndVilk2(graph);
		System.out.println("m[0]" + m[0]);
		System.out.println("m[1]" + m[1]);
		System.out.println(3.0 * m[0] / (double) m[1]);
	}

	public static void mainOmGTUComp(String[] args) throws IOException {
		graph = getNetObject("omgtu_oneComponent.net", 0);

		System.out.println("V:" + graph.getVertexCount());
		System.out.println("E:" + graph.getEdgeCount());
		int k_max = getMaxDegree(graph);
		System.out.println("max_k=" + k_max);
		int[] degrees = getNodesDegrees(graph, k_max + 1);
		for (int i = 0; i < degrees.length; i++) {
			System.out.println(degrees[i]);

		}

		int[][] mass = getQMatrix(graph, 40);
		File logFile = new File("vk_out.txt");
		FileWriter writeFile = new FileWriter(logFile);
		int count = 0;
		for (int i = 1; i < mass.length; i++) {
			for (int j = 1; j < mass.length; j++) {
				writeFile.write(String.format("%.8f", mass[i][j] / 2. / (double) graph.getEdgeCount()) + " ");
			}
			writeFile.write("\n");
		}
		writeFile.close();

	}

	// функция для получения массива встречаемости узлов с заданной степенью
	// связности
	public static <V> int[] getNodesDegrees(Graph<V, ?> graph, int length) {
		Iterator<V> it = graph.getVertices().iterator();
		int[] distr = new int[length];
		while (it.hasNext()) {
			V node = it.next();
			int n = graph.degree(node);
			if (n < length)
				distr[n] = distr[n] + 1;
		}
		return distr;
	}

	// загрузка графа
	public static Graph<Integer, Integer> getNet(String fileName) {
		// System.out.println(fileName);
		Graph graph = new UndirectedSparseGraph();
		PajekNetReader<Graph<Integer, Integer>, Integer, Integer> pnr;
		try {
			pnr = new PajekNetReader<Graph<Integer, Integer>, Integer, Integer>(vertexFactory, edgeFactory);
			File file = new File(fileName);
			pnr.load(fileName, graph);

		} catch (IOException e5) {
			System.out.println("IOException!!!!!!!!!!!!!!!!!!");
		}
		// System.out.println("Nodes num=" + graph.getVertexCount());
		// System.out.println("Edges num=" + graph.getEdgeCount());
		return graph;
	}

	public static Graph getNetObject(String fileName, final int begin) {
		Factory<Object> vertexFactory = new Factory<Object>() {
			int count = begin;

			public Object create() {
				return new Integer(count++);
			}
		};
		Factory<Object> edgeFactory = new Factory<Object>() {
			public Object create() {
				return new Object();
			}
		};

		// System.out.println(fileName);
		Graph graph = new UndirectedSparseGraph();
		PajekNetReader<Graph<Object, Object>, Object, Object> pnr;
		try {
			pnr = new PajekNetReader<Graph<Object, Object>, Object, Object>(vertexFactory, edgeFactory);
			File file = new File(fileName);
			pnr.load(fileName, graph);

		} catch (IOException e5) {
			System.out.println("IOException!!!!!!!!!!!!!!!!!!");
		}
		System.out.println("Nodes num=" + graph.getVertexCount());
		System.out.println("Edges num=" + graph.getEdgeCount());
		return graph;
	}

	public static void main4(String[] args) throws IOException {
		Graph g1 = getNetObject("AER.net", 0);
		Graph g2 = getNetObject("LPA.net", g1.getVertexCount() + 1);
		for (Object v2 : g2.getVertices()) {
			g1.addVertex(v2);
		}
		for (Object e2 : g2.getEdges()) {
			Pair p = g2.getEndpoints(e2);
			g1.addEdge(e2, p.getFirst(), p.getSecond());
		}
		graph = g1;
		System.out.println("V:" + graph.getVertexCount());
		System.out.println("E:" + graph.getEdgeCount());
		int k_max = getMaxDegree(graph);
		System.out.println("max_k=" + k_max);
		int[] degrees = getNodesDegrees(graph, k_max + 1);
		for (int i = 0; i < degrees.length; i++) {
			System.out.println(degrees[i]);

		}

		int[][] mass = getQMatrix(graph, 40);
		File logFile = new File("my_out4.txt");
		FileWriter writeFile = new FileWriter(logFile);
		int count = 0;
		for (int i = 1; i < mass.length; i++) {
			for (int j = 1; j < mass.length; j++) {
				writeFile.write(String.format("%.8f", mass[i][j] / 2. / (double) graph.getEdgeCount()) + " ");
			}
			writeFile.write("\n");
		}
		writeFile.close();

	}

	static PrefferentialAttachment pnRule = new PrefferentialAttachment() {

		double[] d = {
				0
				,0.00000
				,0.01412
				,0.44420
				,0.00000
				,0.00000
				,0.00000
				,8.11735
				,7.70049
				,8.98454
				,9.94148
				,10.95978
				,11.96693
				,12.97616
				,13.98506
				,14.99406
				,16.00308
				,17.01213
				,18.02119
				,19.03026
				,20.03935
				,21.04854
				,22.05766
				,23.06678
				,24.07591
				,25.08504
				,26.09418
				,27.10333
				,28.11248
				,29.12163
				,30.13079
				,31.13995
				,32.14911
				,33.15828
				,34.16745
				,35.17662
				,36.18579
				,37.19497
				,38.20414
				,39.21332
				,40.22250
				,41.23168
				,42.24086
				,43.25004
				,44.25923
				,45.26841
				,46.27760
				,47.28679
				,48.29597
				,49.30516
				,50.31435
				,51.32354
				,52.33273
				,53.34192
				,54.35111
				,55.36030
				,56.36950
				,57.37869
				,58.38788
				,59.39708
				,60.40627
				,61.41546
				,62.42466
				,63.43385
				,64.44305
				,65.45225
				,66.46144
				,67.47064
				,68.47984
				,69.48903
				,70.49823
				,71.50743
				,72.51662
				,73.52582
				,74.53502
				,75.54422
				,76.55342
				,77.56262
				,78.57182
				,79.58101
				,80.59021
				,81.59941
				,82.60861
				,83.61781
				,84.62701
				,85.63621
				,86.64541
				,87.65461
				,88.66381
				,89.67301
				,90.68221
				,91.69141
				,92.70062
				,93.70982
				,94.71902
				,95.72822
				,96.73742
				,97.74662
				,98.75582
				,99.76502
				,100.77423
				,101.78343
				,102.79263
				,103.80183
				,104.81103
				,105.82024
				,106.82944
				,107.83864
				,108.84784
				,109.85704
				,110.86625
				,111.87545
				,112.88465
				,113.89385
				,114.90306
				,115.91226
				,116.92146
				,117.93066
				,118.93987
				,119.94907
				,120.95827
				,121.96748
				,122.97668
				,123.98588
				,124.99509
				,126.00429
				,127.01349
				,128.02269
				,129.03190
				,130.04110
				,131.05030
				,132.05951
				,133.06871
				,134.07791
				,135.08712
				,136.09632
				,137.10553
				,138.11473
				,139.12393
				,140.13314
				,141.14234
				,142.15154
				,143.16075
				,144.16995
				,145.17915
				,146.18836
				,147.19756
				,148.20677
				,149.21597
				,150.22517
				,151.23438
				,152.24358
				,153.25279
				,154.26199
				,155.27119
				,156.28040
				,157.28960
				,158.29881
				,159.30801
				,160.31721
				,161.32642
				,162.33562
				,163.34483
				,164.35403
				,165.36324
				,166.37244
				,167.38164
				,168.39085
				,169.40005
				,170.40926
				,171.41846
				,172.42767
				,173.43687
				,174.44607
				,175.45528
				,176.46448
				,177.47369
				,178.48289
				,179.49210
				,180.50130
				,181.51051
				,182.51971
				,183.52891
				,184.53812
				,185.54732
				,186.55653
				,187.56573
				,188.57494
				,189.58414
				,190.59335
				,191.60255
				,192.61176
				,193.62096
				,194.63017
				,195.63937
				,196.64857
				,197.65778
				,198.66698
				,199.67619
				,200.68539
				,201.69460
				,202.70380
				,203.71301
				,204.72221
				,205.73142
				,206.74062
				,207.74983
				,208.75903
				,209.76824
				,210.77744
				,211.78665
				,212.79585
				,213.80506
				,214.81426
				,215.82347
				,216.83267
				,217.84188
				,218.85108
				,219.86028
				,220.86949
				,221.87869
				,222.88790
				,223.89710
				,224.90631
				,225.91551
				,226.92472
				,227.93392
				,228.94313
				,229.95233
				,230.96154
				,231.97074
				,232.97995
				,233.98915
				,234.99836
				,236.00756
				,237.01677
				,238.02597
				,239.03518
				,240.04438
				,241.05359
				,242.06279
				,243.07200
				,244.08120
				,245.09041
				,246.09961
				,247.10882
				,248.11802
				,249.12723
				,250.13643
				,251.14564
				,252.15485
				,253.16405
				,254.17326
				,255.18246
				,256.19167
				,257.20087
				,258.21008
				,259.21928
				,260.22849
				,261.23769
				,262.24690
				,263.25610
				,264.26531
				,265.27451
				,266.28372
				,267.29292
				,268.30213
				,269.31133
				,270.32054
				,271.32974
				,272.33895
				,273.34815
				,274.35736
				,275.36656
				,276.37577
				,277.38497
				,278.39418
				,279.40338
				,280.41259
				,281.42180
				,282.43100
				,283.44021
				,284.44941
				,285.45862
				,286.46782
				,287.47703
				,288.48623
				,289.49544
				,290.50464
				,291.51385
				,292.52305
				,293.53226
				,294.54146
				,295.55067
				,296.55987
				,297.56908
				,298.57828
				,299.58749
				,300.59670
				,301.60590
				,302.61511
				,303.62431
				,304.63352
				,305.64272
				,306.65193
				,307.66113
				,308.67034
				,309.67954
				,310.68875
				,311.69795
				,312.70716
				,313.71636
				,314.72557
				,315.73477
				,316.74398
				,317.75319
				,318.76239
				,319.77160
				,320.78080
				,321.79001
				,322.79921
				,323.80842
				,324.81762
				,325.82683
				,326.83603
				,327.84524
				,328.85444
				,329.86365
				,330.87286
				,331.88206
				,332.89127
				,333.90047
				,334.90968
				,335.91888
				,336.92809
				,337.93729
				,338.94650
				,339.95570
				,340.96491
				,341.97411
				,342.98332
				,343.99253
				,345.00173
				,346.01094
				,347.02014
				,348.02935
				,349.03855
				,350.04776
				,351.05696
				,352.06617
				,353.07537
				,354.08458
				,355.09378
				,356.10299
				,357.11220
				,358.12140
				,359.13061
				,360.13981
				,361.14902
				,362.15822
				,363.16743
				,364.17663
				,365.18584
				,366.19504
				,367.20425
				,368.21346
				,369.22266
				,370.23187
				,371.24107
				,372.25028
				,373.25948
				,374.26869
				,375.27789
				,376.28710
				,377.29630
				,378.30551
				,379.31472
				,380.32392
				,381.33313
				,382.34233
				,383.35154
				,384.36074
				,385.36995
				,386.37915
				,387.38836
				,388.39756
				,389.40677
				,390.41598
				,391.42518
				,392.43439
				,393.44359
				,394.45280
				,395.46200
				,396.47121
				,397.48041
				,398.48962
				,399.49883
				,400.50803
				,401.51724
				,402.52644
				,403.53565
				,404.54485
				,405.55406
				,406.56326
				,407.57247
				,408.58167
				,409.59088
				,410.60009
				,411.60929
				,412.61850
				,413.62770
				,414.63691
				,415.64611
				,416.65532
				,417.66452
				,418.67373
				,419.68294
				,420.69214
				,421.70135
				,422.71055
				,423.71976
				,424.72896
				,425.73817
				,426.74737
				,427.75658
				,428.76579
				,429.77499
				,430.78420
				,431.79340
				,432.80261
				,433.81181
				,434.82102
				,435.83022
				,436.83943
				,437.84863
				,438.85784
				,439.86705
				,440.87625
				,441.88546
				,442.89466
				,443.90387
				,444.91307
				,445.92228
				,446.93148
				,447.94069
				,448.94990
				,449.95910
				,450.96831
				,451.97751
				,452.98672
				,453.99592
				,455.00513
				,456.01433
				,457.02354
				,458.03275
				,459.04195
				,460.05116
				,461.06036
				,462.06957
				,463.07877
				,464.08798
				,465.09718
				,466.10639
				,467.11560
				,468.12480
				,469.13401
				,470.14321
				,471.15242
				,472.16162
				,473.17083
				,474.18003
				,475.18924
				,476.19845
				,477.20765
				,478.21686
				,479.22606
				,480.23527
				,481.24447
				,482.25368
				,483.26289
				,484.27209
				,485.28130
				,486.29050
				,487.29971
				,488.30891
				,489.31812
				,490.32732
				,491.33653
				,492.34574
				,493.35494
				,494.36415
				,495.37335
				,496.38256
				,497.39176
				,498.40097
				,499.41017
				,500.41938
				,501.42859
				,502.43779
				,503.44700
				,504.45620
				,505.46541
				,506.47461
				,507.48382
				,508.49302
				,509.50223
				,510.51144
				,511.52064
				,512.52985
				,513.53905
				,514.54826
				,515.55746
				,516.56667
				,517.57588
				,518.58508
				,519.59429
				,520.60349
				,521.61270
				,522.62190
				,523.63111
				,524.64031
				,525.64952
				,526.65873
				,527.66793
				,528.67714
				,529.68634
				,530.69555
				,531.70475
				,532.71396
				,533.72316
				,534.73237
				,535.74158
				,536.75078
				,537.75999
				,538.76919
				,539.77840
				,540.78760
				,541.79681
				,542.80602
				,543.81522
				,544.82443
				,545.83363
				,546.84284
				,547.85204
				,548.86125
				,549.87045
				,550.87966
				,551.88887
				,552.89807
				,553.90728
				,554.91648
				,555.92569
				,556.93489
				,557.94410
				,558.95331
				,559.96251
				,560.97172
				,561.98092
				,562.99013
				,563.99933
				,565.00854
				,566.01774
				,567.02695
				,568.03616
				,569.04536
				,570.05457
				,571.06377
				,572.07298
				,573.08218
				,574.09139
				,575.10060
				,576.10980
				,577.11901
				,578.12821
				,579.13742
				,580.14662
				,581.15583
				,582.16503
				,583.17424
				,584.18345
				,585.19265
				,586.20186
				,587.21106
				,588.22027
				,589.22947
				,590.23868
				,591.24789
				,592.25709
				,593.26630
				,594.27550
				,595.28471
				,596.29391
				,597.30312
				,598.31232
				,599.32153
				,600.33074
				,601.33994
				,602.34915
				,603.35835
				,604.36756
				,605.37676
				,606.38597
				,607.39518
				,608.40438
				,609.41359
				,610.42279
				,611.43200
				,612.44120
				,613.45041
				,614.45962
				,615.46882
				,616.47803
				,617.48723
				,618.49644
				,619.50564
				,620.51485
				,621.52405
				,622.53326
				,623.54247
				,624.55167
				,625.56088
				,626.57008
				,627.57929
				,628.58849
				,629.59770
				,630.60691
				,631.61611
				,632.62532
				,633.63452
				,634.64373
				,635.65293
				,636.66214
				,637.67134
				,638.68055
				,639.68976
				,640.69896
				,641.70817
				,642.71737
				,643.72658
				,644.73578
				,645.74499
				,646.75420
				,647.76340
				,648.77261
				,649.78181
				,650.79102
				,651.80022
				,652.80943
				,653.81864
				,654.82784
				,655.83705
				,656.84625
				,657.85546
				,658.86466
				,659.87387
				,660.88308
				,661.89228
				,662.90149
				,663.91069
				,664.91990
				,665.92910
				,666.93831
				,667.94751
				,668.95672
				,669.96593
				,670.97513
				,671.98434
				,672.99354
				,674.00275
				,675.01195
				,676.02116
				,677.03037
				,678.03957
				,679.04878
				,680.05798
				,681.06719
				,682.07639
				,683.08560
				,684.09481
				,685.10401
				,686.11322
				,687.12242
				,688.13163
				,689.14083
				,690.15004
				,691.15924
				,692.16845
				,693.17766
				,694.18686
				,695.19607
				,696.20527
				,697.21448
				,698.22368
				,699.23289
				,700.24210
				,701.25130
				,702.26051
				,703.26971
				,704.27892
				,705.28812
				,706.29733
				,707.30654
				,708.31574
				,709.32495
				,710.33415
				,711.34336
				,712.35256
				,713.36177
				,714.37098
				,715.38018
				,716.38939
				,717.39859
				,718.40780
				,719.41700
				,720.42621
				,721.43542
				,722.44462
				,723.45383
				,724.46303
				,725.47224
				,726.48144
				,727.49065
				,728.49985
				,729.50906
				,730.51827
				,731.52747
				,732.53668
				,733.54588
				,734.55509
				,735.56429
				,736.57350
				,737.58271
				,738.59191
				,739.60112
				,740.61032
				,741.61953
				,742.62873
				,743.63794
				,744.64715
				,745.65635
				,746.66556
				,747.67476
				,748.68397
				,749.69317
				,750.70238
				,751.71159
				,752.72079
				,753.73000
				,754.73920
				,755.74841
				,756.75761
				,757.76682
				,758.77603
				,759.78523
				,760.79444
				,761.80364
				,762.81285
				,763.82205
				,764.83126
				,765.84046
				,766.84967
				,767.85888
				,768.86808
				,769.87729
				,770.88649
				,771.89570
				,772.90490
				,773.91411
				,774.92332
				,775.93252
				,776.94173
				,777.95093
				,778.96014
				,779.96934
				,780.97855
				,781.98776
				,782.99696
				,784.00617
				,785.01537
				,786.02458
				,787.03378
				,788.04299
				,789.05220
				,790.06140
				,791.07061
				,792.07981
				,793.08902
				,794.09822
				,795.10743
				,796.11664
				,797.12584
				,798.13505
				,799.14425
				,800.15346
				,801.16266
				,802.17187
				,803.18108
				,804.19028
				,805.19949
				,806.20869
				,807.21790
				,808.22710
				,809.23631
				,810.24552
				,811.25472
				,812.26393
				,813.27313
				,814.28234
				,815.29154
				,816.30075
				,817.30995
				,818.31916
				,819.32837
				,820.33757
				,821.34678
				,822.35598
				,823.36519
				,824.37439
				,825.38360
				,826.39281
				,827.40201
				,828.41122
				,829.42042
				,830.42963
				,831.43883
				,832.44804
				,833.45725
				,834.46645
				,835.47566
				,836.48486
				,837.49407
				,838.50327
				,839.51248
				,840.52169
				,841.53089
				,842.54010
				,843.54930
				,844.55851
				,845.56771
				,846.57692
				,847.58613
				,848.59533
				,849.60454
				,850.61374
				,851.62295
				,852.63215
				,853.64136
				,854.65057
				,855.65977
				,856.66898
				,857.67818
				,858.68739
				,859.69659
				,860.70580
				,861.71501
				,862.72421
				,863.73342
				,864.74262
				,865.75183
				,866.76103
				,867.77024
				,868.77945
				,869.78865
				,870.79786
				,871.80706
				,872.81627
				,873.82547
				,874.83468
				,875.84389
				,876.85309
				,877.86230
				,878.87150
				,879.88071
				,880.88991
				,881.89912
				,882.90833
				,883.91753
				,884.92674
				,885.93594
				,886.94515
				,887.95435
				,888.96356
				,889.97277
				,890.98197
				,891.99118
				,893.00038
				,894.00959
				,895.01879
				,896.02800
				,897.03721
				,898.04641
				,899.05562
				,900.06482
				,901.07403
				,902.08323
				,903.09244
				,904.10165
				,905.11085
				,906.12006
				,907.12926
				,908.13847
				,909.14767
				,910.15688
				,911.16608
				,912.17529
				,913.18450
				,914.19370
				,915.20291
				,916.21211
				,917.22132
				,918.23052
				,919.23973
				,920.24894
				,921.25814
				,922.26735
				,923.27655
				,924.28576
				,925.29496
				,926.30417
				,927.31338
				,928.32258
				,929.33179
				,930.34099
				,931.35020
				,932.35940
				,933.36861
				,934.37782
				,935.38702
				,936.39623
				,937.40543
				,938.41464
				,939.42384
				,940.43305
				,941.44226
				,942.45146
				,943.46067
				,944.46987
				,945.47908
				,946.48828
				,947.49749
				,948.50670
				,949.51590
				,950.52511
				,951.53431
				,952.54352
				,953.55272
				,954.56193
				,955.57114
				,956.58034
				,957.58955
				,958.59875
				,959.60796
				,960.61716
				,961.62637
				,962.63558
				,963.64478
				,964.65399
				,965.66319
				,966.67240
				,967.68160
				,968.69081
				,969.70002
				,970.70922
				,971.71843
				,972.72763
				,973.73684
				,974.74604
				,975.75525
				,976.76446
				,977.77366
				,978.78287
				,979.79207
				,980.80128
				,981.81048
				,982.81969
				,983.82890
				,984.83810
				,985.84731
				,986.85651
				,987.86572
				,988.87492
				,989.88413
				,990.89334
				,991.90254
				,992.91175
				,993.92095
				,994.93016
				,995.93936
				,996.94857
				,997.95778
				,998.96698
				,999.97619
				,1000.98539
				,1001.99460
				,1003.00380
				,1004.01301
				,1005.02222
				,1006.03142
				,1007.04063
				,1008.04983
				,1009.05904
				,1010.06824
				,1011.07745
				,1012.08666
				,1013.09586
				,1014.10507
				,1015.11427
				,1016.12348
				,1017.13268
				,1018.14189
				,1019.15110
				,1020.16030
				,1021.16951
				,1022.17871
				,1023.18792
				,1024.19712
				,1025.20633
				,1026.21554
				,1027.22474
				,1028.23395
				,1029.24315
				,1030.25236
				,1031.26156
				,1032.27077
				,1033.27998
				,1034.28918
				,1035.29839
				,1036.30759
				,1037.31680
				,1038.32600
				,1039.33521
				,1040.34442
				,1041.35362
				,1042.36283
				,1043.37203
				,1044.38124
				,1045.39044
				,1046.39965
				,1047.40886
				,1048.41806
				,1049.42727
				,1050.43647
				,1051.44568
				,1052.45488
				,1053.46409
				,1054.47330
				,1055.48250
				,1056.49171
				,1057.50091
				,1058.51012
				,1059.51932
				,1060.52853
				,1061.53774
				,1062.54694
				,1063.55615
				,1064.56535
				,1065.57456
				,1066.58376
				,1067.59297
				,1068.60218
				,1069.61138
				,1070.62059
				,1071.62979
				,1072.63900
				,1073.64820
				,1074.65741
				,1075.66662
				,1076.67582
				,1077.68503
				,1078.69423
				,1079.70344
				,1080.71264
				,1081.72185
				,1082.73106
				,1083.74026
				,1084.74947
				,1085.75867
				,1086.76788
				,1087.77708
				,1088.78629
				,1089.79550
				,1090.80470
				,1091.81391
				,1092.82311
				,1093.83232
				,1094.84152
				,1095.85073
				,1096.85994
				,1097.86914
				,1098.87835
				,1099.88755
				,1100.89676
				,1101.90596
				,1102.91517
				,1103.92438
				,1104.93358
				,1105.94279
				,1106.95199
				,1107.96120
				,1108.97040
				,1109.97961
				,1110.98882
				,1111.99802
				,1113.00723
				,1114.01643
				,1115.02564
				,1116.03484
				,1117.04405
				,1118.05326
				,1119.06246
				,1120.07167
				,1121.08087
				,1122.09008
				,1123.09928
				,1124.10849
				,1125.11770
				,1126.12690
				,1127.13611
				,1128.14531
				,1129.15452
				,1130.16372
				,1131.17293
				,1132.18214
				,1133.19134
				,1134.20055
				,1135.20975
				,1136.21896
				,1137.22816
				,1138.23737
				,1139.24658
				,1140.25578
				,1141.26499
				,1142.27419
				,1143.28340
				,1144.29260
				,1145.30181
				,1146.31102
				,1147.32022
				,1148.32943
				,1149.33863
				,1150.34784
				,1151.35704
				,1152.36625
				,1153.37546
				,1154.38466
				,1155.39387
				,1156.40307
				,1157.41228
				,1158.42148
				,1159.43069
				,1160.43990
				,1161.44910
				,1162.45831
				,1163.46751
				,1164.47672
				,1165.48593
				,1166.49513
				,1167.50434
				,1168.51354
				,1169.52275
				,1170.53195
				,1171.54116
				,1172.55037
				,1173.55957
				,1174.56878
				,1175.57798
				,1176.58719
				,1177.59639
				,1178.60560
				,1179.61481
				,1180.62401
				,1181.63322
				,1182.64242
				,1183.65163
				,1184.66083
				,1185.67004
				,1186.67925
				,1187.68845
				,1188.69766
				,1189.70686
				,1190.71607
				,1191.72527
				,1192.73448
				,1193.74369
				,1194.75289
				,1195.76210
				,1196.77130
				,1197.78051
				,1198.78971
				,1199.79892
				,1200.80813
				,1201.81733
				,1202.82654
				,1203.83574
				,1204.84495
				,1205.85415
				,1206.86336
				,1207.87257
				,1208.88177
				,1209.89098
				,1210.90018
				,1211.90939
				,1212.91859
				,1213.92780
				,1214.93701
				,1215.94621
				,1216.95542
				,1217.96462
				,1218.97383
				,1219.98303
				,1220.99224
				,1222.00145
				,1223.01065
				,1224.01986
				,1225.02906
				,1226.03827
				,1227.04747
				,1228.05668
				,1229.06589
				,1230.07509
				,1231.08430
				,1232.09350
				,1233.10271
				,1234.11191
				,1235.12112
				,1236.13033
				,1237.13953
				,1238.14874
				,1239.15794
				,1240.16715
				,1241.17635
				,1242.18556
				,1243.19477
				,1244.20397
				,1245.21318
				,1246.22238
				,1247.23159
				,1248.24079
				,1249.25000
				,1250.25921
				,1251.26841
				,1252.27762
				,1253.28682
				,1254.29603
				,1255.30523
				,1256.31444
				,1257.32365
				,1258.33285
				,1259.34206
				,1260.35126
				,1261.36047
				,1262.36967
				,1263.37888
				,1264.38809
				,1265.39729
				,1266.40650
				,1267.41570
				,1268.42491
				,1269.43411
				,1270.44332
				,1271.45253
				,1272.46173
				,1273.47094
				,1274.48014
				,1275.48935
				,1276.49855
				,1277.50776
				,1278.51697
				,1279.52617
				,1280.53538
				,1281.54458
				,1282.55379
				,1283.56299
				,1284.57220
				,1285.58141
				,1286.59061
				,1287.59982
				,1288.60902
				,1289.61823
				,1290.62744
				,1291.63664
				,1292.64585
				,1293.65505
				,1294.66426
				,1295.67346
				,1296.68267
				,1297.69188
				,1298.70108
				,1299.71029
				,1300.71949
				,1301.72870
				,1302.73790
				,1303.74711
				,1304.75632
				,1305.76552
				,1306.77473
				,1307.78393
				,1308.79314
				,1309.80234
				,1310.81155
				,1311.82076
				,1312.82996
				,1313.83917
				,1314.84837
				,1315.85758
				,1316.86678
				,1317.87599
				,1318.88520
				,1319.89440
				,1320.90361
				,1321.91281
				,1322.92202
				,1323.93122
				,1324.94043
				,1325.94964
				,1326.95884
				,1327.96805
				,1328.97725
				,1329.98646
				,1330.99566
				,1332.00487
				,1333.01408
				,1334.02328
				,1335.03249
				,1336.04169
				,1337.05090
				,1338.06010
				,1339.06931
				,1340.07852
				,1341.08772
				,1342.09693
				,1343.10613
				,1344.11534
				,1345.12454
				,1346.13375
				,1347.14296
				,1348.15216
				,1349.16137
				,1350.17057
				,1351.17978
				,1352.18898
				,1353.19819
				,1354.20740
				,1355.21660
				,1356.22581
				,1357.23501
				,1358.24422
				,1359.25342
				,1360.26263
				,1361.27184
				,1362.28104
				,1363.29025
				,1364.29945
				,1365.30866
				,1366.31786
				,1367.32707
				,1368.33628
				,1369.34548
				,1370.35469
				,1371.36389
				,1372.37310
				,1373.38230
				,1374.39151
				,1375.40072
				,1376.40992
				,1377.41913
				,1378.42833
				,1379.43754
				,1380.44675
				,1381.45595
				,1382.46516
				,1383.47436
				,1384.48357
				,1385.49277
				,1386.50198
				,1387.51119
				,1388.52039
				,1389.52960
				,1390.53880
				,1391.54801
				,1392.55721
				,1393.56642
				,1394.57563
				,1395.58483
				,1396.59404
				,1397.60324
				,1398.61245
				,1399.62165
				,1400.63086
				,1401.64007
				,1402.64927
				,1403.65848
				,1404.66768
				,1405.67689
				,1406.68609
				,1407.69530
				,1408.70451
				,1409.71371
				,1410.72292
				,1411.73212
				,1412.74133
				,1413.75053
				,1414.75974
				,1415.76895
				,1416.77815
				,1417.78736
				,1418.79656
				,1419.80577
				,1420.81497
				,1421.82418
				,1422.83339
				,1423.84259
				,1424.85180
				,1425.86100
				,1426.87021
				,1427.87941
				,1428.88862
				,1429.89783
				,1430.90703
				,1431.91624
				,1432.92544
				,1433.93465
				,1434.94385
				,1435.95306
				,1436.96227
				,1437.97147
				,1438.98068
				,1439.98988
				,1440.99909
				,1442.00829
				,1443.01750
				,1444.02671
				,1445.03591
				,1446.04512
				,1447.05432
				,1448.06353
				,1449.07273
				,1450.08194
				,1451.09115
				,1452.10035
				,1453.10956
				,1454.11876
				,1455.12797
				,1456.13718
				,1457.14638
				,1458.15559
				,1459.16479
				,1460.17400
				,1461.18320
				,1462.19241
				,1463.20162
				,1464.21082
				,1465.22003
				,1466.22923
				,1467.23844
				,1468.24764
				,1469.25685
				,1470.26606
				,1471.27526
				,1472.28447
				,1473.29367
				,1474.30288
				,1475.31208
				,1476.32129
				,1477.33050
				,1478.33970
				,1479.34891
				,1480.35811
				,1481.36732
				,1482.37652
				,1483.38573
				,1484.39494
				,1485.40414
				,1486.41335
				,1487.42255
				,1488.43176
				,1489.44096
				,1490.45017
				,1491.45938
				,1492.46858
				,1493.47779
				,1494.48699
				,1495.49620
				,1496.50540
				,1497.51461
				,1498.52382
				,1499.53302
				,1500.54223
				,1501.55143
				,1502.56064
				,1503.56984
				,1504.57905
				,1505.58826
				,1506.59746
				,1507.60667
				,1508.61587
				,1509.62508
				,1510.63428
				,1511.64349
				,1512.65270
				,1513.66190
				,1514.67111
				,1515.68031
				,1516.68952
				,1517.69872
				,1518.70793
				,1519.71714
				,1520.72634
				,1521.73555
				,1522.74475
				,1523.75396
				,1524.76317
				,1525.77237
				,1526.78158
				,1527.79078
				,1528.79999
				,1529.80919
				,1530.81840
				,1531.82761
				,1532.83681
				,1533.84602
				,1534.85522
				,1535.86443
				,1536.87363
				,1537.88284
				,1538.89205
				,1539.90125
				,1540.91046
				,1541.91966
				,1542.92887
				,1543.93807
				,1544.94728
				,1545.95649
				,1546.96569
				,1547.97490
				,1548.98410
				,1549.99331
				,1551.00251
				,1552.01172
				,1553.02093
				,1554.03013
				,1555.03934
				,1556.04854
				,1557.05775
				,1558.06695
				,1559.07616
				,1560.08537
				,1561.09457
				,1562.10378
				,1563.11298
				,1564.12219
				,1565.13139
				,1566.14060
				,1567.14981
				,1568.15901
				,1569.16822
				,1570.17742
				,1571.18663
				,1572.19583
				,1573.20504
				,1574.21425
				,1575.22345
				,1576.23266
				,1577.24186
				,1578.25107
				,1579.26027
				,1580.26948
				,1581.27869
				,1582.28789
				,1583.29710
				,1584.30630
				,1585.31551
				,1586.32471
				,1587.33392
				,1588.34313
				,1589.35233
				,1590.36154
				,1591.37074
				,1592.37995
				,1593.38916
				,1594.39836
				,1595.40757
				,1596.41677
				,1597.42598
				,1598.43518
				,1599.44439
				,1600.45360
				,1601.46280
				,1602.47201
				,1603.48121
				,1604.49042
				,1605.49962
				,1606.50883
				,1607.51804
				,1608.52724
				,1609.53645
				,1610.54565
				,1611.55486
				,1612.56406
				,1613.57327
				,1614.58248
				,1615.59168
				,1616.60089
				,1617.61009
				,1618.61930
				,1619.62850
				,1620.63771
				,1621.64692
				,1622.65612
				,1623.66533
				,1624.67453
				,1625.68374
				,1626.69294
				,1627.70215
				,1628.71136
				,1629.72056
				,1630.72977
				,1631.73897
				,1632.74818
				,1633.75738
				,1634.76659
				,1635.77580
				,1636.78500
				,1637.79421
				,1638.80341
				,1639.81262
				,1640.82182
				,1641.83103
				,1642.84024
				,1643.84944
				,1644.85865
				,1645.86785
				,1646.87706
				,1647.88626
				,1648.89547
				,1649.90468
				,1650.91388
				,1651.92309
				,1652.93229
				,1653.94150
				,1654.95071
				,1655.95991
				,1656.96912
				,1657.97832
				,1658.98753
				,1659.99673
				,1661.00594
				,1662.01515
				,1663.02435
				,1664.03356
				,1665.04276
				,1666.05197
				,1667.06117
				,1668.07038
				,1669.07959
				,1670.08879
				,1671.09800
				,1672.10720
				,1673.11641
				,1674.12561
				,1675.13482
				,1676.14403
				,1677.15323
				,1678.16244
				,1679.17164
				,1680.18085
				,1681.19005
				,1682.19926
				,1683.20847
				,1684.21767
				,1685.22688
				,1686.23608
				,1687.24529
				,1688.25449
				,1689.26370
				,1690.27291
				,1691.28211
				,1692.29132
				,1693.30052
				,1694.30973
				,1695.31893
				,1696.32814
				,1697.33735
				,1698.34655
				,1699.35576
				,1700.36496
				,1701.37417
				,1702.38337
				,1703.39258
				,1704.40179
				,1705.41099
				,1706.42020
				,1707.42940
				,1708.43861
				,1709.44782
				,1710.45702
				,1711.46623
				,1712.47543
				,1713.48464
				,1714.49384
				,1715.50305
				,1716.51226
				,1717.52146
				,1718.53067
				,1719.53987
				,1720.54908
				,1721.55828
				,1722.56749
				,1723.57670
				,1724.58590
				,1725.59511
				,1726.60431
				,1727.61352
				,1728.62272
				,1729.63193
				,1730.64114
				,1731.65034
				,1732.65955
				,1733.66875
				,1734.67796
				,1735.68716
				,1736.69637
				,1737.70558
				,1738.71478
				,1739.72399
				,1740.73319
				,1741.74240
				,1742.75160
				,1743.76081
				,1744.77002
				,1745.77922
				,1746.78843
				,1747.79763
				,1748.80684
				,1749.81604
				,1750.82525
				,1751.83446
				,1752.84366
				,1753.85287
				,1754.86207
				,1755.87128
				,1756.88048
				,1757.88969
				,1758.89890
				,1759.90810
				,1760.91731
				,1761.92651
				,1762.93572
				,1763.94492
				,1764.95413
				,1765.96334
				,1766.97254
				,1767.98175
				,1768.99095
				,1770.00016
				,1771.00937
				,1772.01857
				,1773.02778
				,1774.03698
				,1775.04619
				,1776.05539
				,1777.06460
				,1778.07381
				,1779.08301
				,1780.09222
				,1781.10142
				,1782.11063
				,1783.11983
				,1784.12904
				,1785.13825
				,1786.14745
				,1787.15666
				,1788.16586
				,1789.17507
				,1790.18427
				,1791.19348
				,1792.20269
				,1793.21189
				,1794.22110
				,1795.23030
				,1796.23951
				,1797.24871
				,1798.25792
				,1799.26713
				,1800.27633
				,1801.28554
				,1802.29474
				,1803.30395
				,1804.31315
				,1805.32236
				,1806.33157
				,1807.34077
				,1808.34998
				,1809.35918
				,1810.36839
				,1811.37759
				,1812.38680
				,1813.39601
				,1814.40521
				,1815.41442
				,1816.42362
				,1817.43283
				,1818.44203
				,1819.45124
				,1820.46045
				,1821.46965
				,1822.47886
				,1823.48806
				,1824.49727
				,1825.50648
				,1826.51568
				,1827.52489
				,1828.53409
				,1829.54330
				,1830.55250
				,1831.56171
				,1832.57092
				,1833.58012
				,1834.58933
				,1835.59853
				,1836.60774
				,1837.61694
				,1838.62615
				,1839.63536
				,1840.64456
				,1841.65377
				,1842.66297
				,1843.67218
				,1844.68138
				,1845.69059
				,1846.69980
				,1847.70900
				,1848.71821
				,1849.72741
				,1850.73662
				,1851.74582
				,1852.75503
				,1853.76424
				,1854.77344
				,1855.78265
				,1856.79185
				,1857.80106
				,1858.81026
				,1859.81947
				,1860.82868
				,1861.83788
				,1862.84709
				,1863.85629
				,1864.86550
				,1865.87470
				,1866.88391
				,1867.89312
				,1868.90232
				,1869.91153
				,1870.92073
				,1871.92994
				,1872.93914
				,1873.94835
				,1874.95756
				,1875.96676
				,1876.97597
				,1877.98517
				,1878.99438
				,1880.00359
				,1881.01279
				,1882.02200
				,1883.03120
				,1884.04041
				,1885.04961
				,1886.05882
				,1887.06803
				,1888.07723
				,1889.08644
				,1890.09564
				,1891.10485
				,1892.11405
				,1893.12326
				,1894.13247
				,1895.14167
				,1896.15088
				,1897.16008
				,1898.16929
				,1899.17849
				,1900.18770
				,1901.19691
				,1902.20611
				,1903.21532
				,1904.22452
				,1905.23373
				,1906.24293
				,1907.25214
				,1908.26135
				,1909.27055
				,1910.27976
				,1911.28896
				,1912.29817
				,1913.30737
				,1914.31658
				,1915.32579
				,1916.33499
				,1917.34420
				,1918.35340
				,1919.36261
				,1920.37181
				,1921.38102
				,1922.39023
				,1923.39943
				,1924.40864
				,1925.41784
				,1926.42705
				,1927.43626
				,1928.44546
				,1929.45467
				,1930.46387
				,1931.47308
				,1932.48228
				,1933.49149
				,1934.50070
				,1935.50990
				,1936.51911
				,1937.52831
				,1938.53752
				,1939.54672
				,1940.55593
				,1941.56514
				,1942.57434
				,1943.58355
				,1944.59275
				,1945.60196
				,1946.61116
				,1947.62037
				,1948.62958
				,1949.63878
				,1950.64799
				,1951.65719
				,1952.66640
				,1953.67560
				,1954.68481
				,1955.69402
				,1956.70322
				,1957.71243
				,1958.72163
				,1959.73084
				,1960.74004
				,1961.74925
				,1962.75846
				,1963.76766
				,1964.77687
				,1965.78607
				,1966.79528
				,1967.80448
				,1968.81369
				,1969.82290
				,1970.83210
				,1971.84131
				,1972.85051
				,1973.85972
				,1974.86892
				,1975.87813
				,1976.88734
				,1977.89654
				,1978.90575
				,1979.91495
				,1980.92416
				,1981.93337
				,
		};

		@Override
		public double f(int k) {
			 if (d.length > k)	return d[k];
			 return 0;
		}

		@Override
		public int getM() {
			// TODO Auto-generated method stub
			return 0;
		}
	};

	public static Set<Set<Integer>> getClusters(Graph<Integer, Integer> graph) {

		Set<Set<Integer>> clusterSet = new HashSet<Set<Integer>>();

		HashSet<Integer> unvisitedVertices = new HashSet<Integer>(graph.getVertices());

		while (!unvisitedVertices.isEmpty()) {
			Set<Integer> cluster = new HashSet<Integer>();
			Integer root = unvisitedVertices.iterator().next();
			unvisitedVertices.remove(root);
			cluster.add(root);

			Buffer<Integer> queue = new UnboundedFifoBuffer<Integer>();
			queue.add(root);

			while (!queue.isEmpty()) {
				Integer currentVertex = queue.remove();
				Collection<Integer> neighbors = graph.getNeighbors(currentVertex);

				for (Integer neighbor : neighbors) {
					if (unvisitedVertices.contains(neighbor)) {
						queue.add(neighbor);
						unvisitedVertices.remove(neighbor);
						cluster.add(neighbor);
					}
				}
			}
			clusterSet.add(cluster);
		}
		return clusterSet;
	}

	static PrefferentialAttachment paBA = new PrefferentialAttachment() {
		@Override
		public double f(int k) {
			return k;
		}

		@Override
		public int getM() {
			// TODO Auto-generated method stub
			return 0;
		}
	};
	static PrefferentialAttachment paDiad = new PrefferentialAttachment() {

		double[] d = { 0, 0, 0.003294646, 0, 0.240521439, 1.244381394, 0.299790292, 1.170955822, 0.04137648,
				0.477360407, 0.235674249, 0, 1.357404844, 3.37215413, 4.888285435, 7.130675075, 9.637875764,
				12.12871295, 15.07834675, 17.41629675, 21.8352908, 24.76478548, 24.91072449, 26.67040269, 27.49867721,
				28.86255507, 29.91965626, 31.151986, 32.28462293, 33.47389563, 34.63114985, 35.80652448, 36.9717256,
				38.14267833, 39.31043361, 40.48000616, 41.64858751, 42.81774449, 43.98660154, 45.15564455, 46.32460194,
				47.49362319, 48.66262425, 49.83165059, 51.0006761, 52.16971432, 53.33875697, 54.50780789, 55.67686429,
				56.84592709, 58.01499521, 59.18406873, 60.35314711, 61.52223022

		};

		@Override
		public double f(int k) {
			if (d.length > k)
				return d[k];
			return 1.168864038 * k;
		}

		@Override
		public int getM() {
			// TODO Auto-generated method stub
			return 0;
		}
	};
	static PrefferentialAttachment paDiad1 = new PrefferentialAttachment() {

		double[] d = { 0., 0.674653941, 0.144005349, 0.273933959, 1.007415174, 1.604742744, 1.760445167, 1.774334517,
				1.292659724, 1.315724876, 0.834211467, 0.270279827, 0.408893198, 0.497910592, 0.241411517, 0.230069662,
				0.40512869, 0.514773552, 1.134053195, 1.17313742, 17.83687722, 24.51771137, 25.25781302, 26.44157595,
				27.59235747, 28.74558277, 29.8986295, 31.05169084, 32.20475243, 33.35781518, 34.51087891, 35.66394352,
				36.81700893, 37.97007506, 39.12314185, 40.27620924, 41.42927718, 42.58234562, 43.73541453, 44.88848386,
				46.04155359, 47.19462368, 48.3476941, 49.50076485, 50.65383588, 51.80690719, 52.95997875, 54.11305055,
				55.26612257, 56.41919481, 57.57226723, 58.72533984, 59.87841263

		};

		@Override
		public double f(int k) {
			if (d.length > k)
				return d[k];
			return 1.153015732 * k;
		}

		@Override
		public int getM() {
			// TODO Auto-generated method stub
			return 0;
		}
	};

	static PrefferentialAttachment pnD = new PrefferentialAttachment() {

		double[] d = { 0., 0.003809833, 0.067964458, 1.060093436, 1.912861838, 2.729283665, 3.461701218, 3.844865891,
				3.977275371, 4.520958609, 4.586866812, 4.497803109, 5.195584962, 5.520214886, 5.387683825, 5.291485988,
				4.991930452, 4.58935471, 4.462812932, 4.286743541, 18.01875306, 20.14444773, 20.98669596, 21.95657928,
				22.91383017, 23.87232924, 24.83070814, 25.78910094, 26.74749428, 27.70588927, 28.66428563, 29.62268322,
				30.58108194, 31.53948167, 32.49788233, 33.45628383, 34.41468611, 35.37308909, 36.33149273, 37.28989696,
				38.24830175, 39.20670705, 40.16511283, 41.12351905, 42.08192569, 43.0403327, 43.99874008, 44.95714779,
				45.91555581, 46.87396413, 47.83237272, 48.79078157, 49.74919067

		};

		@Override
		public double f(int k) {
			if (d.length > k)
				return d[k];
			return 0.958348638 * k;
		}

		@Override
		public int getM() {
			// TODO Auto-generated method stub
			return 0;
		}
	};
	static PrefferentialAttachment pnD2 = new PrefferentialAttachment() {

		double[] d = { 0., 0, 0.084150036, 0.939106202, 2.073650781, 3.14371131, 4.252688815, 4.958476716, 5.416925206,
				6.458640288, 6.976252121, 7.387147488, 8.913033395, 9.964028431, 10.55667444, 11.10275572, 11.60537919,
				12.0748273, 12.80746097, 13.31158445, 13.73066076, 14.20687714, 14.57933888, 14.91480061, 15.22018568,
				15.4951417, 15.73952693, 15.95426362, 16.13872676, 16.29088378, 16.41247912, 16.50419566, 16.56288724,
				19.46616361, 19.87421939, 20.03700016, 20.18053972, 20.29858869, 20.39123196, 20.45838402, 37.04188699,
				39.23062645, 40.15409713, 41.11169956, 42.06838242, 43.02509007, 43.98179708, 44.93850414, 45.89521123,
				46.85191835, 47.8086255, 48.76533267, 49.72203986

		};

		@Override
		public double f(int k) {
			if (d.length > k)
				return d[k];
			return 0.956687661 * k;
		}

		@Override
		public int getM() {
			// TODO Auto-generated method stub
			return 0;
		}
	};

	static Graph seed_graph() {
		Graph<Integer, Integer> gr = new UndirectedSparseMultigraph<Integer, Integer>();
		for (int i = -1; i > -8; i--) {
			Integer n = new Integer(i);
			gr.addVertex(n);
		}
		int l = -1;
		Object[] mass = gr.getVertices().toArray();
		for (int i = 0; i < mass.length - 1; i++)
			for (int j = i + 1; j < mass.length; j++)
				if (i != j)
					gr.addEdge(new Integer(l--), (Integer) mass[i], (Integer) mass[j]);

		return gr;
	}

	static <V> int getMaxDegree(Graph<V, ?> graph) {
		Iterator<V> it = graph.getVertices().iterator();
		int res = 0;
		while (it.hasNext()) {
			V node = it.next();
			int n = graph.degree(node);
			if (res < n)
				res = n;
		}
		return res;
	}

	public static int[][] getQMatrix(Graph<Object, Object> graph, int size) {
		int[][] ret = new int[size][size];
		Collection<Object> list = graph.getEdges();
		for (Object edge : list) {
			// Pair<Object> p = graph.getEndpoints(edge);
			Object n1 = graph.getSource(edge);
			Object n2 = graph.getDest(edge);
			/*
			 * if(graph.degree(n1)>graph.degree(n2)) {Object n3=n1; n1=n2;
			 * n2=n3;}
			 */
			int degree_n1 = graph.degree(n1);
			int degree_n2 = graph.degree(n2);
			if (degree_n1 < size && degree_n2 < size) {
				ret[degree_n1][degree_n2] = ret[degree_n1][degree_n2] + 1;
				// ret[degree_n2][degree_n1] = ret[degree_n2][degree_n1] + 1;

			}
		}
		return ret;
	}

	static void saveGraph(Graph g, String filename) {
		PajekNetWriter<Integer, Integer> gm = new PajekNetWriter<Integer, Integer>();
		Transformer<Integer, String> vs = new Transformer<Integer, String>() {

			@Override
			public String transform(Integer arg0) {
				// TODO Auto-generated method stub
				return arg0.toString();
			}

		};
		Transformer<Integer, Number> nev = new Transformer<Integer, Number>() {

			@Override
			public Number transform(Integer arg0) {
				// TODO Auto-generated method stub
				return arg0;
			}

		};

		try {
			gm.save(g, new FileWriter(filename), vs, nev);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	static Graph<Integer, Integer> loadFromEdgeList(String str) throws IOException {
		Graph gr = new UndirectedSparseGraph();

		BufferedReader br2 = new BufferedReader(new FileReader(str));
		try {

			String sCurrentLine;
			br2 = new BufferedReader(new FileReader(str));
			// System.out.println(str);
			int i = 1;
			while ((sCurrentLine = br2.readLine()) != null) {
				String[] strMass = sCurrentLine.split("\t");
				if (strMass.length == 2) {
					gr.addEdge(new Integer(i++), new Integer(strMass[0]), new Integer(strMass[1]));
					// bw.write(strMass[0] + " " + strMass[1]);
					// bw.newLine();

				}

				else
					gr.addVertex(new Integer(strMass[0]));
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br2 != null)
					br2.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		// System.out.println(gr);

		return gr;
	}

	public static int[] getTriAndVilk2(Graph<Integer, Integer> graph) {
		// перебираем все вершины
		int count = 0;
		int count2 = 0;
		Collection<Integer> list = graph.getVertices();

		for (Integer node : list) {

			int k = 0;
			for (Integer link : graph.getIncidentEdges(node)) {
				// if (!graph.getOpposite(node, link).isMark())
				k++;
			}
			count2 = count2 + k * (k - 1) / 2;

			Collection<Integer> neig_s = graph.getNeighbors(node);
			Iterator<Integer> it1 = neig_s.iterator();

			// if (!node.isMark())
			while (it1.hasNext()) {
				Integer node1 = it1.next();
				Iterator<Integer> it2 = neig_s.iterator();
				// if (!node1.isMark())
				while (it2.hasNext()) {
					Integer node2 = it2.next();
					if (
					// (!node2.isMark()) &&
					(node1 != node2) && graph.isNeighbor(node1, node2))
						count++;
				}
			}
		}
		return new int[] { count / 6, count2 };
	}

}
